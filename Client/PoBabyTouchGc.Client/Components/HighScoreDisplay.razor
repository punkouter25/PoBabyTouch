@using System.Text.Json
@inject HttpClient Http

<div class="high-score-display">
    <div class="high-score-header">
        <h2>üèÜ High Scores</h2>
        @if (!string.IsNullOrEmpty(GameMode) && GameMode != "Default")
        {
            <p class="game-mode">@GameMode Mode</p>
        }
    </div>

    @if (IsLoading)
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
            <p>Loading high scores...</p>
        </div>
    }
    else if (HighScores.Any())
    {
        <div class="high-score-list">
            @for (int i = 0; i < HighScores.Count; i++)
            {
                var score = HighScores[i];
                var rank = i + 1;
                <div class="high-score-entry @GetRankClass(rank)">
                    <div class="rank">
                        @if (rank == 1)
                        {
                            <span class="rank-icon">ü•á</span>
                        }
                        else if (rank == 2)
                        {
                            <span class="rank-icon">ü•à</span>
                        }
                        else if (rank == 3)
                        {
                            <span class="rank-icon">ü•â</span>
                        }
                        else
                        {
                            <span class="rank-number">#@rank</span>
                        }
                    </div>
                    <div class="player-initials">@score.PlayerInitials</div>
                    <div class="score-value">@score.Score.ToString("N0")</div>
                    <div class="achieved-date">@score.AchievedAt.ToString("MMM dd")</div>
                </div>
            }
        </div>
    }
    else if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="error-container">
            <p class="error-message">@ErrorMessage</p>
            <button @onclick="RefreshScores" class="refresh-button">Try Again</button>
        </div>
    }
    else
    {
        <div class="no-scores-container">
            <p>No high scores yet!</p>
            <p>Be the first to set a record! üéØ</p>
        </div>
    }

    @if (ShowRefreshButton && !IsLoading)
    {
        <div class="refresh-container">
            <button @onclick="RefreshScores" class="refresh-button">
                üîÑ Refresh Scores
            </button>
        </div>
    }
</div>

<style>
    .high-score-display {
        max-width: 600px;
        margin: 0 auto;
        padding: 1rem;
        background: #f8f9fa;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .high-score-header {
        text-align: center;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #e9ecef;
    }

    .high-score-header h2 {
        color: #2c3e50;
        margin-bottom: 0.5rem;
        font-size: 2rem;
    }

    .game-mode {
        color: #6c757d;
        font-style: italic;
        margin: 0;
    }

    .loading-container {
        text-align: center;
        padding: 2rem;
    }

    .loading-spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #4CAF50;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 1rem;
    }

    .high-score-list {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .high-score-entry {
        display: grid;
        grid-template-columns: 60px 80px 1fr auto;
        align-items: center;
        padding: 1rem;
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s, box-shadow 0.2s;
    }

    .high-score-entry:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
    }

    .high-score-entry.rank-1 {
        background: linear-gradient(135deg, #ffd700, #ffed4e);
        border: 2px solid #f59e0b;
    }

    .high-score-entry.rank-2 {
        background: linear-gradient(135deg, #c0c0c0, #e5e7eb);
        border: 2px solid #9ca3af;
    }

    .high-score-entry.rank-3 {
        background: linear-gradient(135deg, #cd7f32, #f97316);
        border: 2px solid #ea580c;
    }

    .rank {
        display: flex;
        justify-content: center;
        align-items: center;
        font-weight: bold;
    }

    .rank-icon {
        font-size: 1.5rem;
    }

    .rank-number {
        font-size: 1.2rem;
        color: #6c757d;
    }

    .player-initials {
        font-size: 1.5rem;
        font-weight: bold;
        letter-spacing: 0.1em;
        color: #2c3e50;
        text-align: center;
    }

    .score-value {
        font-size: 1.3rem;
        font-weight: bold;
        color: #27ae60;
        text-align: right;
    }

    .achieved-date {
        font-size: 0.9rem;
        color: #6c757d;
        text-align: right;
    }

    .error-container, .no-scores-container {
        text-align: center;
        padding: 2rem;
        color: #6c757d;
    }

    .error-message {
        color: #dc3545;
        margin-bottom: 1rem;
    }

    .refresh-container {
        text-align: center;
        margin-top: 1rem;
    }

    .refresh-button {
        background: #4CAF50;
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 6px;
        font-size: 0.9rem;
        cursor: pointer;
        transition: background 0.3s;
    }

    .refresh-button:hover {
        background: #45a049;
    }
</style>

@code {
    [Parameter] public string GameMode { get; set; } = "Default";
    [Parameter] public int MaxScores { get; set; } = 10;
    [Parameter] public bool ShowRefreshButton { get; set; } = true;
    [Parameter] public bool AutoRefresh { get; set; } = false;
    [Parameter] public int AutoRefreshInterval { get; set; } = 30000; // 30 seconds

    private List<HighScore> HighScores { get; set; } = new();
    private bool IsLoading { get; set; } = true;
    private string ErrorMessage { get; set; } = "";
    private Timer? refreshTimer;

    public class HighScore
    {
        public string PlayerInitials { get; set; } = "";
        public int Score { get; set; }
        public DateTime AchievedAt { get; set; }
        public string GameMode { get; set; } = "Default";
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadHighScores();

        if (AutoRefresh)
        {
            refreshTimer = new Timer(async _ => await InvokeAsync(RefreshScores), null, 
                AutoRefreshInterval, AutoRefreshInterval);
        }
    }

    private async Task LoadHighScores()
    {
        try
        {
            IsLoading = true;
            ErrorMessage = "";

            var response = await Http.GetAsync($"api/highscores?count={MaxScores}&gameMode={GameMode}");
            
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var scores = JsonSerializer.Deserialize<List<HighScore>>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                HighScores = scores ?? new List<HighScore>();
            }
            else
            {
                ErrorMessage = "Failed to load high scores. Please try again.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading high scores: {ex.Message}";
            Console.WriteLine($"Error loading high scores: {ex}");
        }
        finally
        {
            IsLoading = false;
        }
    }

    public async Task RefreshScores()
    {
        await LoadHighScores();
        StateHasChanged();
    }

    private string GetRankClass(int rank)
    {
        return rank switch
        {
            1 => "rank-1",
            2 => "rank-2",
            3 => "rank-3",
            _ => ""
        };
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
}