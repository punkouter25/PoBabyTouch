@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="high-score-entry-overlay">
    <div class="high-score-entry-modal">
        <div class="congratulations-header">
            <h2>ðŸŽ‰ Congratulations!</h2>
            <p>You achieved a high score of <strong>@Score</strong> points!</p>
            @if (PlayerRank > 0)
            {
                <p>You rank #@PlayerRank on the leaderboard!</p>
            }
        </div>

        <div class="initials-input-section">
            <h3>Enter your initials:</h3>
            <div class="initials-input-container">
                <input @ref="initialInput1" 
                       @bind="Initial1" 
                       @onkeyup="HandleKeyUp" 
                       @onkeydown="HandleKeyDown"
                       maxlength="1" 
                       class="initial-input" 
                       data-index="0" />
                <input @ref="initialInput2" 
                       @bind="Initial2" 
                       @onkeyup="HandleKeyUp" 
                       @onkeydown="HandleKeyDown"
                       maxlength="1" 
                       class="initial-input" 
                       data-index="1" />
                <input @ref="initialInput3" 
                       @bind="Initial3" 
                       @onkeyup="HandleKeyUp" 
                       @onkeydown="HandleKeyDown"
                       maxlength="1" 
                       class="initial-input" 
                       data-index="2" />
            </div>
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="error-message">@ErrorMessage</div>
            }
        </div>

        <div class="action-buttons">
            <button @onclick="SaveHighScore" 
                    disabled="@(IsSaving || !IsValidInitials)" 
                    class="save-button">
                @if (IsSaving)
                {
                    <span>Saving...</span>
                }
                else
                {
                    <span>Save High Score</span>
                }
            </button>
            <button @onclick="Skip" 
                    disabled="@IsSaving" 
                    class="skip-button">
                Skip
            </button>
        </div>
    </div>
</div>

<style>
    .high-score-entry-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .high-score-entry-modal {
        background: white;
        padding: 2rem;
        border-radius: 12px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        text-align: center;
        min-width: 400px;
        max-width: 500px;
    }

    .congratulations-header h2 {
        color: #4CAF50;
        margin-bottom: 1rem;
        font-size: 2rem;
    }

    .congratulations-header p {
        font-size: 1.2rem;
        margin-bottom: 0.5rem;
    }

    .initials-input-section {
        margin: 2rem 0;
    }

    .initials-input-section h3 {
        margin-bottom: 1rem;
        color: #333;
    }

    .initials-input-container {
        display: flex;
        justify-content: center;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .initial-input {
        width: 3rem;
        height: 3rem;
        font-size: 2rem;
        text-align: center;
        border: 2px solid #ddd;
        border-radius: 8px;
        font-weight: bold;
        text-transform: uppercase;
    }

    .initial-input:focus {
        outline: none;
        border-color: #4CAF50;
        box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.2);
    }

    .action-buttons {
        display: flex;
        gap: 1rem;
        justify-content: center;
        margin-top: 2rem;
    }

    .save-button {
        background: #4CAF50;
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        font-size: 1rem;
        cursor: pointer;
        transition: background 0.3s;
    }

    .save-button:hover:not(:disabled) {
        background: #45a049;
    }

    .save-button:disabled {
        background: #ccc;
        cursor: not-allowed;
    }

    .skip-button {
        background: #f44336;
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        font-size: 1rem;
        cursor: pointer;
        transition: background 0.3s;
    }

    .skip-button:hover:not(:disabled) {
        background: #da190b;
    }

    .skip-button:disabled {
        background: #ccc;
        cursor: not-allowed;
    }

    .error-message {
        color: #f44336;
        font-size: 0.9rem;
        margin-top: 0.5rem;
    }
</style>

@code {
    [Parameter] public int Score { get; set; }
    [Parameter] public string GameMode { get; set; } = "Default";
    [Parameter] public EventCallback OnSaved { get; set; }
    [Parameter] public EventCallback OnSkipped { get; set; }

    private ElementReference initialInput1;
    private ElementReference initialInput2;
    private ElementReference initialInput3;

    private string Initial1 { get; set; } = "";
    private string Initial2 { get; set; } = "";
    private string Initial3 { get; set; } = "";

    private bool IsSaving { get; set; } = false;
    private string ErrorMessage { get; set; } = "";
    private int PlayerRank { get; set; } = 0;

    private bool IsValidInitials => 
        !string.IsNullOrWhiteSpace(Initial1) && 
        !string.IsNullOrWhiteSpace(Initial2) && 
        !string.IsNullOrWhiteSpace(Initial3);

    protected override async Task OnInitializedAsync()
    {
        // Get player rank for this score
        try
        {
            var response = await Http.GetAsync($"api/highscores/rank/{Score}?gameMode={GameMode}");
            if (response.IsSuccessStatusCode)
            {
                var rankJson = await response.Content.ReadAsStringAsync();
                PlayerRank = JsonSerializer.Deserialize<int>(rankJson);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to get player rank: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await initialInput1.FocusAsync();
        }
    }

    private async Task HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key.Length == 1 && char.IsLetter(e.Key[0]))
        {
            // Move to next input after entering a letter
            if (!string.IsNullOrEmpty(Initial1) && string.IsNullOrEmpty(Initial2))
            {
                await initialInput2.FocusAsync();
            }
            else if (!string.IsNullOrEmpty(Initial2) && string.IsNullOrEmpty(Initial3))
            {
                await initialInput3.FocusAsync();
            }
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Backspace")
        {
            // Move to previous input when backspacing
            if (string.IsNullOrEmpty(Initial3) && !string.IsNullOrEmpty(Initial2))
            {
                await initialInput2.FocusAsync();
            }
            else if (string.IsNullOrEmpty(Initial2) && !string.IsNullOrEmpty(Initial1))
            {
                await initialInput1.FocusAsync();
            }
        }
        else if (e.Key == "Enter" && IsValidInitials)
        {
            await SaveHighScore();
        }
    }

    private async Task SaveHighScore()
    {
        if (!IsValidInitials)
        {
            ErrorMessage = "Please enter all three initials";
            return;
        }

        IsSaving = true;
        ErrorMessage = "";

        try
        {
            var initials = $"{Initial1}{Initial2}{Initial3}".ToUpper();
            var saveRequest = new
            {
                PlayerInitials = initials,
                Score = Score,
                GameMode = GameMode
            };

            var json = JsonSerializer.Serialize(saveRequest);
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

            var response = await Http.PostAsync("api/highscores", content);

            if (response.IsSuccessStatusCode)
            {
                await OnSaved.InvokeAsync();
            }
            else
            {
                ErrorMessage = "Failed to save high score. Please try again.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error saving high score: {ex.Message}";
            Console.WriteLine($"Error saving high score: {ex}");
        }
        finally
        {
            IsSaving = false;
        }
    }

    private async Task Skip()
    {
        await OnSkipped.InvokeAsync();
    }
}