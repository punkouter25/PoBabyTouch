@page "/leader"
@using System.Net.Http.Json
@using PoBabyTouchGc.Shared.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>PoBabyTouchGc</PageTitle>

<div class="leaderboard-container">
    <h1>Leaderboard</h1>
    
    <div class="leaderboard-content">
        @if (isLoading)
        {
            <div class="loading-spinner">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Loading leaderboard data...</p>
            </div>
        }
        else if (errorMessage != null)
        {
            <div class="alert alert-danger">
                <p>Error loading leaderboard: @errorMessage</p>
                <button class="btn btn-primary" @onclick="LoadLeaderboardData">Try Again</button>
            </div>
        }
        else if (leaderboardEntries != null && leaderboardEntries.Count > 0)
        {
            <table class="leaderboard-table">
                <thead>
                    <tr>
                        <th>Rank</th>
                        <th>Initials</th>
                        <th>Score</th>
                        <th>Date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var entry in leaderboardEntries)
                    {
                        <tr class="@(entry.Rank <= 3 ? "top-rank" : "")">
                            <td class="rank-cell">
                                @if (entry.Rank == 1)
                                {
                                    <span class="trophy gold">üèÜ</span>
                                }
                                else if (entry.Rank == 2)
                                {
                                    <span class="trophy silver">ü•à</span>
                                }
                                else if (entry.Rank == 3)
                                {
                                    <span class="trophy bronze">ü•â</span>
                                }
                                else
                                {
                                    @entry.Rank
                                }
                            </td>
                            <td class="initials-cell">@entry.Initials</td>
                            <td class="score-cell">@entry.Score</td>
                            <td class="date-cell">@entry.Date.ToLocalTime().ToString("MM/dd/yyyy")</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="empty-leaderboard">
                <p>No scores have been recorded yet. Be the first!</p>
            </div>
        }
    </div>
    
    <div class="navigation-buttons">
        <button class="btn btn-primary" @onclick="GoToGame">Play Game</button>
        <button class="btn btn-secondary" @onclick="GoToHome">Back to Menu</button>
    </div>
</div>

<style>
    .leaderboard-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        display: flex;
        flex-direction: column;
        min-height: 100vh;
        background-color: #f8f9fa;
    }
    
    h1 {
        text-align: center;
        color: #3a86ff;
        margin-bottom: 30px;
        font-size: 2.5rem;
    }
    
    .leaderboard-content {
        flex: 1;
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-bottom: 20px;
    }
    
    .leaderboard-table {
        width: 100%;
        border-collapse: collapse;
    }
    
    .leaderboard-table th {
        background-color: #3a86ff;
        color: white;
        padding: 12px;
        text-align: left;
        border-bottom: 2px solid #ccc;
    }
    
    .leaderboard-table td {
        padding: 12px;
        border-bottom: 1px solid #eee;
    }
    
    .top-rank {
        background-color: #fff8e6;
        font-weight: bold;
    }
    
    .trophy {
        font-size: 1.2rem;
        margin-right: 5px;
    }
    
    .gold {
        color: #ffd700;
    }
    
    .silver {
        color: #c0c0c0;
    }
    
    .bronze {
        color: #cd7f32;
    }
    
    .rank-cell {
        text-align: center;
        width: 60px;
    }
    
    .initials-cell {
        font-weight: bold;
        width: 80px;
    }
    
    .score-cell {
        width: 80px;
        text-align: right;
    }
    
    .date-cell {
        width: 120px;
        font-size: 0.9rem;
        color: #666;
    }
    
    .loading-spinner {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 40px;
    }
    
    .empty-leaderboard {
        text-align: center;
        padding: 40px;
        color: #666;
        font-style: italic;
    }
    
    .navigation-buttons {
        display: flex;
        justify-content: center;
        gap: 10px;
    }
    
    .navigation-buttons .btn {
        padding: 10px 25px;
        border-radius: 30px;
    }
    
    /* Responsive adjustments */
    @media (max-width: 576px) {
        .leaderboard-container {
            padding: 10px;
        }
        
        h1 {
            font-size: 2rem;
        }
        
        .leaderboard-table th, 
        .leaderboard-table td {
            padding: 8px;
            font-size: 0.9rem;
        }
        
        .date-cell {
            display: none;
        }
    }
</style>

@code {
    private List<LeaderboardEntry>? leaderboardEntries;
    private bool isLoading = true;
    private string? errorMessage;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadLeaderboardData();
    }
    
    private async Task LoadLeaderboardData()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            
            // Fetch leaderboard data from API
            leaderboardEntries = await Http.GetFromJsonAsync<List<LeaderboardEntry>>("api/scores");
            
            // If no entries, initialize empty list
            leaderboardEntries ??= new List<LeaderboardEntry>();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load leaderboard data: {ex.Message}";
            leaderboardEntries = null;
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void GoToGame()
    {
        NavigationManager.NavigateTo("/game");
    }
    
    private void GoToHome()
    {
        NavigationManager.NavigateTo("/");
    }
}