@page "/game-example"
@using PoBabyTouchGc.Client.Components
@using System.Text.Json
@inject HttpClient Http

<div class="game-container">
    <div class="game-header">
        <h1>üéÆ PoBabyTouchGc Game</h1>
        <div class="current-score">
            <h2>Score: @CurrentScore</h2>
        </div>
    </div>

    <div class="game-area">
        @if (GameState == GameStates.Playing)
        {
            <div class="game-content">
                <p>Game is running...</p>
                <button @onclick="() => EndGame(1250)" class="demo-button">
                    üéØ Simulate Game End (Score: 1250)
                </button>
                <button @onclick="() => EndGame(750)" class="demo-button">
                    üéØ Simulate Game End (Score: 750)
                </button>
                <button @onclick="() => EndGame(2500)" class="demo-button">
                    üéØ Simulate Game End (Score: 2500)
                </button>
            </div>
        }
        else if (GameState == GameStates.GameOver)
        {
            <div class="game-over">
                <h2>üéÆ Game Over!</h2>
                <p>Final Score: <strong>@FinalScore</strong></p>
                
                @if (!IsHighScoreChecked)
                {
                    <div class="checking-score">
                        <p>Checking if you achieved a high score...</p>
                        <div class="loading-spinner"></div>
                    </div>
                }
                else if (!ShowHighScoreEntry)
                {
                    <div class="score-result">
                        <p>Nice try! Your score didn't make it to the top 10.</p>
                        <button @onclick="StartNewGame" class="play-again-button">
                            üîÑ Play Again
                        </button>
                    </div>
                }
            </div>
        }
    </div>

    <div class="high-scores-section">
        <h3>üèÜ Current High Scores</h3>
        <HighScoreDisplay GameMode="@CurrentGameMode" 
                         MaxScores="5" 
                         ShowRefreshButton="false" 
                         AutoRefresh="false" />
    </div>
</div>


<style>
    .game-container {
        max-width: 1000px;
        margin: 0 auto;
        padding: 2rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        color: white;
    }

    .game-header {
        text-align: center;
        margin-bottom: 2rem;
        padding: 1rem;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 12px;
        backdrop-filter: blur(10px);
    }

    .game-header h1 {
        font-size: 2.5rem;
        margin-bottom: 1rem;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
    }

    .current-score h2 {
        font-size: 2rem;
        color: #4CAF50;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
    }

    .game-area {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 12px;
        padding: 2rem;
        margin-bottom: 2rem;
        backdrop-filter: blur(10px);
        min-height: 300px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .game-content {
        text-align: center;
    }

    .demo-button {
        background: #4CAF50;
        color: white;
        border: none;
        padding: 1rem 2rem;
        margin: 0.5rem;
        border-radius: 8px;
        font-size: 1.1rem;
        cursor: pointer;
        transition: all 0.3s;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .demo-button:hover {
        background: #45a049;
        transform: translateY(-2px);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
    }

    .game-over {
        text-align: center;
    }

    .game-over h2 {
        font-size: 2rem;
        margin-bottom: 1rem;
        color: #f44336;
    }

    .checking-score {
        text-align: center;
        padding: 1rem;
    }

    .loading-spinner {
        width: 40px;
        height: 40px;
        border: 4px solid rgba(255, 255, 255, 0.3);
        border-top: 4px solid white;
        border-radius: 50%;
        margin: 1rem auto;
    }

    .score-result {
        text-align: center;
        padding: 1rem;
    }

    .play-again-button {
        background: #2196F3;
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        font-size: 1.1rem;
        cursor: pointer;
        transition: background 0.3s;
        margin-top: 1rem;
    }

    .play-again-button:hover {
        background: #1976D2;
    }

    .high-scores-section {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 12px;
        padding: 1rem;
        backdrop-filter: blur(10px);
    }

    .high-scores-section h3 {
        text-align: center;
        margin-bottom: 1rem;
        font-size: 1.5rem;
    }
</style>

@code {
    private enum GameStates
    {
        Playing,
        GameOver
    }

    private GameStates GameState { get; set; } = GameStates.Playing;
    private int CurrentScore { get; set; } = 0;
    private int FinalScore { get; set; } = 0;
    private string CurrentGameMode { get; set; } = "Default";
    private bool ShowHighScoreEntry { get; set; } = false;
    private bool IsHighScoreChecked { get; set; } = false;

    private async Task EndGame(int score)
    {
        CurrentScore = score;
        FinalScore = score;
        GameState = GameStates.GameOver;
        IsHighScoreChecked = false;
        ShowHighScoreEntry = false;

        StateHasChanged();

        // Check if this is a high score
        await CheckIfHighScore(score);
    }

    private async Task CheckIfHighScore(int score)
    {
        try
        {
            var response = await Http.GetAsync($"api/highscores/check/{score}?gameMode={CurrentGameMode}");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                using var document = JsonDocument.Parse(json);
                var isHighScore = document.RootElement.GetProperty("data").GetBoolean();
                
                if (isHighScore)
                {
                    ShowHighScoreEntry = true;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to check high score: {ex.Message}");
            await Task.Delay(1); // Ensure this is properly async
        }
        finally
        {
            IsHighScoreChecked = true;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnHighScoreSaved()
    {
        ShowHighScoreEntry = false;
        StateHasChanged();
        
        // Refresh the high scores display
        await Task.Delay(1000); // Small delay to ensure save is complete
        StateHasChanged();
    }

    private async Task OnHighScoreSkipped()
    {
        ShowHighScoreEntry = false;
        StateHasChanged();
    }

    private void StartNewGame()
    {
        GameState = GameStates.Playing;
        CurrentScore = 0;
        FinalScore = 0;
        ShowHighScoreEntry = false;
        IsHighScoreChecked = false;
        StateHasChanged();
    }
}
