name: Deploy to Azure with GH and Azure CLI

on:
  push:
    branches: [ master ]
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: read
  deployments: write # Add write permission for deployments
  statuses: write    # Add write permission for deployment statuses

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Install GitHub CLI
      run: |
        type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install gh -y
        gh --version
    
    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az --version
        
    - name: Restore dependencies
      run: dotnet restore PoBabyTouchGc.sln
      
    - name: Build
      run: dotnet build PoBabyTouchGc.sln --configuration Release --no-restore
      
    - name: Test
      run: dotnet test PoBabyTouchGc.sln --configuration Release --no-build
      
    - name: Publish
      run: dotnet publish Server/PoBabyTouchGc.Server/PoBabyTouchGc.Server.csproj -c Release -o ${{github.workspace}}/publish
    
    - name: Set deployment status with GitHub CLI
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Attempting to create GitHub deployment..."
        CREATE_DEPLOYMENT_RESPONSE=$(gh api \
          repos/${{ github.repository }}/deployments \
          --field ref="${{ github.ref }}" \
          --field environment="production" \
          --field description="Deployment to Azure App Service" \
          --field auto_merge=false \
          --field required_contexts='[]') # Use --field for JSON array
        
        echo "GitHub Deployment Creation Response:"
        echo "$CREATE_DEPLOYMENT_RESPONSE"
        
        echo "Extracting deployment ID..."
        DEPLOYMENT_ID=$(echo "$CREATE_DEPLOYMENT_RESPONSE" | gh api --jq '.id') # Use gh api --jq for parsing
        
        if [ -z "$DEPLOYMENT_ID" ] || [ "$DEPLOYMENT_ID" == "null" ]; then
          echo "::error::Failed to create GitHub deployment or extract ID."
          exit 1
        fi
        
        echo "Setting deployment status to in_progress for ID: $DEPLOYMENT_ID..."
        gh api \
          repos/${{ github.repository }}/deployments/$DEPLOYMENT_ID/statuses \
          --field state="in_progress" \
          --field description="Deploying to Azure App Service..." # Use --field for strings too for consistency
          
        echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV
        echo "Successfully set deployment status to in_progress."
    
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy to Azure Web App with Azure CLI
      id: deploy-to-azure
      run: |
        echo "Starting deployment to Azure Web App using Azure CLI..."
        # Create a zip file of the published output
        cd ${{github.workspace}}/publish
        zip -r site.zip ./*
        
        # Validate deployment with what-if operation first
        echo "Validating deployment..."
        az webapp config watch --resource-group PoBabyTouch --name PoBabyTouchApp
        
        # Deploy the zip file to Azure Web App
        echo "Deploying to Azure App Service..."
        RESULT=$(az webapp deployment source config-zip \
          --resource-group PoBabyTouch \
          --name PoBabyTouchApp \
          --src site.zip)
          
        echo "Deployment completed with result: $RESULT"
        
        if [ $? -eq 0 ]; then
          echo "DEPLOY_SUCCESS=true" >> $GITHUB_ENV
        else
          echo "DEPLOY_SUCCESS=false" >> $GITHUB_ENV
        fi
        
        # Restart the webapp to apply changes
        echo "Restarting the web app to apply changes..."
        az webapp restart --resource-group PoBabyTouch --name PoBabyTouchApp
        
        # Get app details for verification
        echo "Getting app details for verification..."
        APP_URL=$(az webapp show --resource-group PoBabyTouch --name PoBabyTouchApp --query defaultHostName -o tsv)
        echo "APP_URL=https://$APP_URL" >> $GITHUB_ENV
        
    - name: Update GitHub deployment status
      if: always()
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ "${{ env.DEPLOY_SUCCESS }}" == "true" ]; then
          echo "Setting deployment status to success..."
          gh api \
            repos/${{ github.repository }}/deployments/${{ env.DEPLOYMENT_ID }}/statuses \
            -F state="success" \
            -F description="Deployment to Azure App Service completed successfully!" \
            -F environment_url="${{ env.APP_URL }}"
        else
          echo "Setting deployment status to failure..."
          gh api \
            repos/${{ github.repository }}/deployments/${{ env.DEPLOYMENT_ID }}/statuses \
            -F state="failure" \
            -F description="Deployment to Azure App Service failed."
        fi
        
    - name: Verify deployment with Azure CLI
      if: env.DEPLOY_SUCCESS == 'true'
      run: |
        echo "Verifying deployment status..."
        SITE_URL="${{ env.APP_URL }}"
        
        # Add retry logic with exponential backoff
        max_retries=5
        retry_count=0
        wait_time=10
        
        while [ $retry_count -lt $max_retries ]; do
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $SITE_URL)
          
          if [ $HTTP_STATUS -eq 200 ] || [ $HTTP_STATUS -eq 302 ]; then
            echo "✅ Deployment verification successful: Site is responding with HTTP status $HTTP_STATUS"
            
            # Log successful deployment to Application Insights
            az monitor app-insights component update --app PoBabyTouchInsights --resource-group PoBabyTouch --custom-events "[{\"name\":\"Deployment\",\"properties\":{\"result\":\"success\",\"branch\":\"${{ github.ref }}\",\"commitId\":\"${{ github.sha }}\"}}]"
            
            break
          else
            retry_count=$((retry_count+1))
            if [ $retry_count -lt $max_retries ]; then
              echo "⚠️ Site is responding with HTTP status $HTTP_STATUS. Retrying in $wait_time seconds... (Attempt $retry_count/$max_retries)"
              sleep $wait_time
              wait_time=$((wait_time*2)) # Exponential backoff
            else
              echo "❌ Deployment verification failed after $max_retries attempts: Site is responding with HTTP status $HTTP_STATUS"
              echo "You can manually check the site at $SITE_URL"
              
              # Log failed deployment validation to Application Insights
              az monitor app-insights component update --app PoBabyTouchInsights --resource-group PoBabyTouch --custom-events "[{\"name\":\"Deployment\",\"properties\":{\"result\":\"validation-failed\",\"branch\":\"${{ github.ref }}\",\"commitId\":\"${{ github.sha }}\"}}]"
              
              # Mark GitHub deployment as success but environment as inactive
              gh api \
                repos/${{ github.repository }}/deployments/${{ env.DEPLOYMENT_ID }}/statuses \
                -F state="inactive" \
                -F description="Deployment completed but site verification failed."
            fi
          fi
        done
